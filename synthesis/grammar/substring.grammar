using semantics Rest560.Semantics;
using learners Rest560.WitnessFunctions;

language REST;

@complete feature double Score = Rest560.RankingScore;

@input List<List<string[]>> InputTables;

@start List<string[]> Tier1Table :=
    Project(Tier2Table, projectionList)
    | N1(Tier2Table);

List<string[]> Tier2Table :=
    Order(Tier3Table, SortKeys)
    | N2(Tier3Table);

List<Tuple<int,int,int>> Criteria :=
    One(filterCriteria)
    //| More(filterCriteria, @recurse[1] Criteria);

List<Tuple<int,bool>> SortKeys :=
    OneKey(sortCriteria)
    | MoreKey(sortCriteria, @recurse[5] SortKeys);
    
List<string[]> Tier3Table :=
    Select(Tier4Table, Criteria)
    | N3(Tier4Table);

List<string[]> Tier4Table :=
    Join(Tier5Table, joiningLeftColumn, @recurse[2] Tier4Table, joiningRightColumn)
    | N4(Tier5Table);

List<string[]> Tier5Table :=
    Named(InputTables, tableIndex)
    // | Group(Tier3Table, groupingColumns, aggregator);

// The first integer in the triple is an input to a binary operator enum.
// This lets us yield directly the set of possibilities with just one disjuntive examples spec.
Tuple<int, int, int> filterCriteria;
Tuple<int, bool> sortCriteria;
// Tuple<int, int> aggregator;
int joiningLeftColumn;
int joiningRightColumn;
int tableIndex;
List<int> projectionList;
List<int> groupingColumns; // properties to group by
