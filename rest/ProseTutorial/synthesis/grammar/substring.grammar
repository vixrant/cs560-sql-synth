using semantics ProseTutorial.Semantics;
using learners ProseTutorial.WitnessFunctions;

language REST;

@complete feature double Score = ProseTutorial.RankingScore;

@input List<List<string[]>> InputTables;

@start List<string[]> StarterTable :=
    Project(StarterTable2,projectionList)

List<string[]> StarterTable2 :=
    Named(InputTables,tableIndex)

int tableIndex;
List<int> projectionList;




//@start List<string[]> Tier5Table :=
//    Named(InputTables,tableIndex)
//    | Group( Tier3Table, Array<Cname>, Array<(Agg, Cname)>)
//    | Join( Tier4Table, Tier4Table, Array<(Cname, Cname)>)
//    | LeftJoin( Tier4Table, Tier3Table, (Cname, Cname));

// List<string[]> Tier4Table :=
//    Named(InputTables,tableIndex)
//    | Group( Tier3Table, Array<Cname>, Array<(Agg, Cname)>)
//    | Join( Tier4Table, Tier4Table, Array<(Cname, Cname)>)
//    | LeftJoin( Tier4Table, Tier3Table, (Cname, Cname));


//List<string[]> Tier3Table := 
//      Select(Tier4Table, Array<Prim>)
//    | N(Tier4Table);

//List<string[]> Tier2Table :=
//      Project(Tier3Table, Array<Cname>)
//    | N(Tier3Table);

//List<string[]> Tier1Table :=
//      Order(Tier2Table, Array<Key>)
//    | N(Tier2Table);

//List<string[]> Key :=
//      Asc(Cname)
//    | Desc(Cname);

//List<string[]> Col :=
//      Named(Cname)
//    | GC(Agg, Cname);

//List<string[]> Prim :=
//      Const(Col, Binop)
//    | InputCompare(Inputname, Binop)
//    | IsNull(Cname)
//    | IsNotNull(Cname);

//List<string[]> Agg := Max() | Min();
//List<string[]> Binop := Eq() | Lt() | Lteq() | Gt() | Gteq() | Neq();

//List<string[]> Tname;
//List<string[]> Cname;

